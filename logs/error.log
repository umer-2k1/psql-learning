{"date":"2025-03-09T12:16:25.449Z","level":"error","message":"\nInvalid `prisma.user.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:11:39\n\n   8 // #swagger.tags = ['user']\n   9 try {\n  10   const { name, email } = req.body;\n→ 11   const newUser = await prisma.user.create(\nError querying the database: ERROR: password authentication failed for user 'neondb_owner'","method":"POST","service":"user-service","url":"/"}
{"date":"2025-03-09T12:23:06.449Z","level":"error","message":"\nInvalid `prisma.user.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:11:39\n\n   8 // #swagger.tags = ['user']\n   9 try {\n  10   const { name, email } = req.body;\n→ 11   const newUser = await prisma.user.create(\nError querying the database: ERROR: password authentication failed for user 'neondb_owner'","method":"POST","service":"user-service","url":"/"}
{"date":"2025-03-09T12:23:12.480Z","level":"error","message":"\nInvalid `prisma.user.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:11:39\n\n   8 // #swagger.tags = ['user']\n   9 try {\n  10   const { name, email } = req.body;\n→ 11   const newUser = await prisma.user.create(\nError querying the database: ERROR: password authentication failed for user 'neondb_owner'","method":"POST","service":"user-service","url":"/"}
{"date":"2025-03-09T12:42:52.232Z","level":"error","message":"\nInvalid `prisma.user.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:11:39\n\n   8 // #swagger.tags = ['user']\n   9 try {\n  10   const { name, email } = req.body;\n→ 11   const newUser = await prisma.user.create(\nUnique constraint failed on the fields: (`email`)","method":"POST","service":"user-service","url":"/"}
{"date":"2025-03-09T12:45:21.367Z","level":"error","message":"\nInvalid `prisma.userProfile.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:32:49\n\n  29 // #swagger.tags = ['user']\n  30 try {\n  31   const { bio, avatarUrl, userId } = req.body;\n→ 32   const newProfile = await prisma.userProfile.create(\nAn operation failed because it depends on one or more records that were required but not found. No 'User' record (needed to inline connect on create for 'UserProfile' record) was found for a nested connect on one-to-one relation 'UserToUserProfile'.","method":"POST","service":"user-service","url":"/profile"}
{"date":"2025-03-09T12:59:59.233Z","level":"error","message":"\nInvalid `prisma.category.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\category.controller.ts:10:47\n\n   7 // #swagger.tags = ['post']\n   8 try {\n   9   const { name } = req.body;\n→ 10   const newCategory = await prisma.category.create({\n         data: {\n       +   name: String\n         }\n       })\n\nArgument `name` is missing.","method":"POST","service":"user-service","url":"/"}
{"date":"2025-03-09T13:11:11.277Z","level":"error","message":"\nInvalid `prisma.userProfile.create()` invocation in\nD:\\GitHub\\psql-learning\\src\\controllers\\user.controller.ts:50:49\n\n  47 // #swagger.tags = ['user']\n  48 try {\n  49   const { bio, avatarUrl, userId } = req.body;\n→ 50   const newProfile = await prisma.userProfile.create({\n         data: {\n           bio: undefined,\n           avatarUrl: undefined,\n           user: {\n             connect: {\n               id: undefined,\n       ?       email?: String,\n       ?       profileId?: String,\n       ?       AND?: UserWhereInput | UserWhereInput[],\n       ?       OR?: UserWhereInput[],\n       ?       NOT?: UserWhereInput | UserWhereInput[],\n       ?       name?: StringFilter | String,\n       ?       createdAt?: DateTimeFilter | DateTime,\n       ?       updatedAt?: DateTimeFilter | DateTime,\n       ?       profile?: UserProfileNullableRelationFilter | UserProfileWhereInput | Null,\n       ?       posts?: PostListRelationFilter,\n       ?       comments?: CommentListRelationFilter\n             }\n           }\n         }\n       })\n\nArgument `connect` of type UserWhereUniqueInput needs at least one of `id`, `email` or `profileId` arguments. Available options are marked with ?.","method":"POST","service":"user-service","url":"/profile"}

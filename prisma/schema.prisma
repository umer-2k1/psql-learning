// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
  id         String        @id @default(uuid())
  name       String
  email      String        @unique
  profile    UserProfile?
  profileId  String?       @unique
  posts      Post[]
  comments   Comment[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model UserProfile {
  id         String   @id @default(uuid())
  bio        String?
  avatarUrl  String?
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categories  Category[]
  comments    Comment[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt 
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  posts      Post[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Comment {
  id         String   @id @default(uuid())
  content    String
  authorId   String
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId     String
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

 